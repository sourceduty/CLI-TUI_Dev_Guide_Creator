# Custom CLI-TUI Program Dev Guide
# Copyright (C) 2024, Sourceduty - All Rights Reserved.

import os
import sys

def main_menu():
    print("Customizable CLI-TUI Program Model Development Guide")
    print("Follow the steps below to build your Notepad program.")
    print("1. Setup Project Structure")
    print("2. Add Core Features")
    print("3. Implement User Interface")
    print("4. Configure File Management")
    print("5. Test and Debug")
    print("6. Exit Development Terminal")
    choice = input("Please choose an option: ")
    return choice

def setup_project_structure():
    print("Setting up the project structure...")
    project_name = input("Enter the Notepad project name: ")
    if not os.path.exists(project_name):
        os.mkdir(project_name)
        print(f"Project '{project_name}' created successfully.")
    else:
        print("Project already exists. Using the existing structure.")
    os.chdir(project_name)
    with open("notepad.py", "w") as f:
        f.write("# Notepad Program\n")
        f.write("# Auto-generated by the Development Terminal\n")
    print("Basic structure initialized.")

def add_core_features():
    print("Adding core features...")
    print("Select a feature to implement:")
    print("1. Create a New Note")
    print("2. Edit an Existing Note")
    print("3. Save a Note")
    print("4. Delete a Note")
    print("5. Back to Main Menu")
    choice = input("Choose an option (1-5): ")
    if choice == "1":
        append_feature_to_program("create_note")
    elif choice == "2":
        append_feature_to_program("edit_note")
    elif choice == "3":
        append_feature_to_program("save_note")
    elif choice == "4":
        append_feature_to_program("delete_note")
    elif choice == "5":
        return
    else:
        print("Invalid choice. Returning to main menu.")

def append_feature_to_program(feature):
    print(f"Adding feature '{feature}' to the program...")
    with open("notepad.py", "a") as f:
        if feature == "create_note":
            f.write("""
def create_note():
    print("Creating a new note...")
    note_title = input("Enter the note title: ")
    content = input("Enter the note content: ")
    with open(note_title + ".txt", "w") as note_file:
        note_file.write(content)
    print(f"Note '{note_title}' created successfully!")
""")
        elif feature == "edit_note":
            f.write("""
def edit_note():
    print("Editing an existing note...")
    note_title = input("Enter the note title to edit: ")
    if os.path.exists(note_title + ".txt"):
        with open(note_title + ".txt", "r+") as note_file:
            content = note_file.read()
            print(f"Current content: \\n{content}")
            new_content = input("Enter new content: ")
            note_file.seek(0)
            note_file.write(new_content)
            note_file.truncate()
        print(f"Note '{note_title}' updated successfully!")
    else:
        print("Note does not exist.")
""")
        elif feature == "save_note":
            f.write("""
def save_note():
    print("Saving a note...")
    note_title = input("Enter the note title to save: ")
    content = input("Enter the note content: ")
    with open(note_title + ".txt", "w") as note_file:
        note_file.write(content)
    print(f"Note '{note_title}' saved successfully!")
""")
        elif feature == "delete_note":
            f.write("""
def delete_note():
    print("Deleting a note...")
    note_title = input("Enter the note title to delete: ")
    if os.path.exists(note_title + ".txt"):
        os.remove(note_title + ".txt")
        print(f"Note '{note_title}' deleted successfully!")
    else:
        print("Note does not exist.")
""")
    print(f"Feature '{feature}' added successfully.")

def implement_user_interface():
    print("Implementing user interface...")
    with open("notepad.py", "a") as f:
        f.write("""
def main_menu():
    while True:
        print("\\nNotepad Program Menu")
        print("1. Create Note")
        print("2. Edit Note")
        print("3. Save Note")
        print("4. Delete Note")
        print("5. Exit")
        choice = input("Choose an option (1-5): ")
        if choice == "1":
            create_note()
        elif choice == "2":
            edit_note()
        elif choice == "3":
            save_note()
        elif choice == "4":
            delete_note()
        elif choice == "5":
            print("Exiting the Notepad program. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")
""")
    print("User interface added successfully.")

def configure_file_management():
    print("Configuring file management system...")
    print("Basic file operations are integrated into the core features.")
    print("No additional configuration is required.")

def test_and_debug():
    print("Testing and debugging...")
    print("Run the 'notepad.py' program to test the features.")
    print("Debugging tips:")
    print("- Ensure all necessary features are implemented.")
    print("- Check for syntax errors in the generated file.")
    print("- Validate file operations by creating, editing, and deleting notes.")

def main():
    while True:
        choice = main_menu()
        if choice == "1":
            setup_project_structure()
        elif choice == "2":
            add_core_features()
        elif choice == "3":
            implement_user_interface()
        elif choice == "4":
            configure_file_management()
        elif choice == "5":
            test_and_debug()
        elif choice == "6":
            print("Exiting the development terminal. Goodbye!")
            sys.exit()
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()